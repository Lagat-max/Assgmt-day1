Software engineering is a branch of computer science used for developing, testing and maintaining software.

Identify and describe at least three key milestones in the evolution of software engineering.
1. The Birth of Structured Programming (1960s-1970s)
Before structured programming, software was often written in a chaotic and unorganized way, making it hard to debug and maintain. The early programming methods led to code which lacked clear structure and made large systems hard to scale.
2. The Introduction of the Waterfall Model (1970s)
As software projects grew larger and more complex, there was a need for a more organized approach to development. The early methods were no longer sufficient to handle larger projects, leading to the need for a formal methodology.
3. The Emergence of Agile Methodologies (1990s-2000s)
In the late 20th century, many software projects struggled with the inflexibility of traditional methodologies like Waterfall. Changes in customer requirements, technological advancements, and a faster pace of development required a more flexible approach to software engineering.


List and briefly explain the phases of the Software Development Life Cycle.
 planning - identifying the software requirement or purpose and scope.
 requirement analysis - identifying the final user specification. 
design - building the framework. 
coding - converting software design into tangible code.
 testing - examining the software for any bugs and glitches

Compare and contrast the Waterfall and Agile methodologies. Provide examples of scenarios where each would be appropriate.
Waterfall methodology 
- Linear and sequential, each phase is completed before moving on. 
- there is Low flexibility, changes are hard to incorporate once a phase is complete.
- Customer feedback comes late, after the product is developed.
- Testing is done at the end of the development process.
An example of a scenario it's used is developing a software system for a finance application that needs to comply with government regulations of a country.


Agile methodology
- Iterative and incremental, with multiple cycles (sprints). 
- High flexibility, adapts to changing requirements. 
- Regular customer feedback is incorporated into every sprint. 
- Testing is continuous and done after each iteration.
An example of a scenario it is used is building a mobile app for a social media platform.

Describe the roles and responsibilities of a Software Developer, a Quality Assurance Engineer, and a Project Manager in a software engineering team.
Software Developer 
- developing applications,programs and systems using programming languages and frameworks.
- maintaining and updating software to keep it functional. 
- collaborating with other team members to ensure best practice when developing software.
- reporting to the project manager about the progress of the software development.
Quality Assurance Engineer
- collaborate with stakeholders to understand and clarify software requirement.
- create development standards and procedures for the programmers to follow.
- confirm that the software meets the requirements before deployment. 
- analyse the product to identify bugs and suggest changes to make them more efficient. 
- develop and execute automation scripts using open source tools.
Project Manager
- assembles and lead the software development team.
- discuss the project and it's requirement with the client and software developers.
- create blueprint for the project.
- tracking and communicating information regarding the project milestone.
- deliver the complete software to the client and regularly check its performance.


Discuss the importance of Integrated Development Environments (IDEs) and Version Control Systems (VCS) in the software development process. Give examples of each.
An Integrated Development Environment (IDE) is a software platform that facilitates the creation of other software applications by providing a space to write, compile, and debug code eg Pycharm.
Version Control Systems (VCS) are tools used in software development process. They track and manage changes to code over time, allowing developers to collaborate, keep arecord of changes, and revert to previous versions when necessary. An example is Git.

What are some common challenges faced by software engineers? Provide strategies to overcome these challenges.
-Limited Infrastructure-Limited high-performance software engineering tools and computing platforms and inefficient data storage architectures. 
 Solution: Software engineers must rely heavily on a robust infrastructure to perform their jobs effectively.
-Time Constraints - software engineering is a demanding and time-intensive field, often requiring engineers to work under high pressure to meet tight deadlines.
 Solution: adopt agile methodologies, such as Scrum, to streamline workflows by dividing large projects into manageable sprints
-rapid technological advancement- it places considerable pressure on software engineers to stay current.
 Solution: adopting continuous learning practices and using agile methodologies to adapt to emerging trends, keeping their skills sharp in an ever-evolving industry.
-Software Security- programming secure software is a complex and challenging task. 
 Solution: research ways to defend against hacking, malware, phishing, insider and third-party threats


Explain the different types of testing (unit, integration, system, and acceptance) and their importance in software quality assurance.
Unit tests - are close to the source of an application, They consist in testing individual methods and functions of the classes, components, or modules used by your software. - it ensures that each unit performs its intended function correctly, isolated from other components.
Integration tests - verify that different modules or services used by your application work well together.They help ensure data flows smoothly between modules and interfaces work as expected.
System testing -Focuses on the entire software system as a whole, including all functionalities and interactions.It helps to verify that the system meets all functional and non-functional requirements, including performance, usability, and security .
Acceptance tests- are formal tests that verify if a system satisfies business requirements. They require the entire application to be running while testing and focus on replicating user behaviors. They show whether the software meets the needs of the end-user and is ready for deployment.

#Part 2: Introduction to AI and Prompt Engineering


Define prompt engineering and discuss its importance in interacting with AI models.
Prompt engineering  is the process where you guide generative AI solutions to generate desired outputs.
Importance:
Improved user experience - Prompt engineering makes it easy for users to obtain relevant results in the first prompt. It helps mitigate bias that may be present from existing human bias in the large language modelsâ€™ training data.
Increased flexibility - A prompt engineer can create prompts with domain-neutral instructions highlighting logical links and broad patterns.
developer control - Prompt engineering gives developers more control over users' interactions with the AI. Effective prompts provide intent and establish context to the large language models.
Provide an example of a vague prompt and then improve it by making it clear, specific, and concise. Explain why the improved prompt is more effective.
Vague Prompt: "Tell me about the LMS in PLP Academy."
Improved Prompt (Clear, Specific, and Concise): "Explain the key features, target audience, and use cases of the LMS platform."
Explanation:
Vague Prompt: The original prompt is too general and doesn't provide any direction about the software or its specific aspects to focus on.
Improved Prompt: The improved version clearly asks for specific information (key features, target audience, use cases), and is concise without unnecessary details, making it much easier to answer effectively.
